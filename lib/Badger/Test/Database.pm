#========================================================================
#
# Badger::Test::Database
#
# DESCRIPTION
#   Subclass of Badger::Database for testing purposes.  Ultimately
#   this should be auto-generated by Makefile.PL using responses to
#   questions the user gives.
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#
#========================================================================

package Badger::Test::Database;

use Badger::Class
    version => 0.01,
    debug   => 0,
    base    => 'Badger::Database',
    constant => {
        TDB => 'Badger::Test::Database',
    },
    exports => {
        any => 'TDB',
        all => '$DB_TESTS',     # imported from Badger::Test::DBConfig
    };

# the config module is created by Makefile.PL and exports the
# $ENGINE, $DATABASE, $USERNAME and $PASSWORD package variables 
# that will be used as default connection parameters.

use Badger::Test::DBConfig;
use Badger::Test;

skip_all("You said you didn't want to run the tests against a real database")
    unless $DB_TESTS;


#-----------------------------------------------------------------------
# define some custom queries
#-----------------------------------------------------------------------

our $QUERIES = { 
    drop_users    => 'DROP TABLE IF EXISTS badger_test_users;',
    drop_addrs    => 'DROP TABLE IF EXISTS badger_test_addresses;',
    drop_orders   => 'DROP TABLE IF EXISTS badger_test_orders;',
    drop_items    => 'DROP TABLE IF EXISTS badger_test_order_items;',
    drop_sessions => 'DROP TABLE IF EXISTS badger_test_sessions;',
    create_users  => 
        'CREATE TABLE badger_test_users (
            id          <serial_type>,
            username    CHAR(32) NOT NULL,
            password    CHAR(32) NOT NULL,
            name        CHAR(64) NOT NULL,
            address_id  <serial_ref>
         );',
    create_addrs => 
        'CREATE TABLE badger_test_addresses (
            id          <serial_type>,
            line1       CHAR(64) NOT NULL,
            line2       CHAR(64),
            town        CHAR(64) NOT NULL,
            region      CHAR(64) NOT NULL,
            country     CHAR(64) NOT NULL
         );',
    create_orders => 
        'CREATE TABLE badger_test_orders (
            id          <serial_type>,
            user_id     <serial_ref> NOT NULL,
            deliver_to  <serial_ref> NOT NULL,
            date        CHAR(24) NOT NULL
         );',
    create_items => 
        'CREATE TABLE badger_test_order_items (
            id          <serial_type>,
            order_id    <serial_ref> NOT NULL,
            line_no     INTEGER NOT NULL,
            product     CHAR(24) NOT NULL,
            quantity    INTEGER NOT NULL
         );',
    create_sessions => 
        "CREATE TABLE badger_test_sessions (
            id          <serial_type>,
            data        TEXT,
            status      CHAR(24)
         );",
};


#-----------------------------------------------------------------------
# define the tables in the model, some of which have their own queries
#-----------------------------------------------------------------------

our $TABLES = {
    users => {
        table   => 'badger_test_users',
        id      => 'id',
        fields  => 'username password name address_id',
        update  => 'password name address_id',
        queries => {
            by_id  => 'SELECT <columns> FROM <table> WHERE id=?',
            insert => 'INSERT INTO <table> (<fields>) VALUES (<?fields>)',
        },
        methods => {
            delete  => 1,
            address => {
                type  => 'link',
                table => 'addresses',
            },
            orders => {
                type  => 'many',
                table => 'orders',
                fkey  => 'user_id',
            },
        },
    },
    addresses => {
        table  => 'badger_test_addresses',
        id     => 'id',
        fields => 'line1 line2 town region country',
        update => 'line1 line2',
    },
    orders => {
        table   => 'badger_test_orders',
        id      => 'id',
        fields  => 'user_id deliver_to date',
        update  => 'deliver_to',
        methods => {
            user => {
                type  => 'link',
                table => 'users',
            },
            items => {
                type  => 'list',
                table => 'order_items',
                fkey  => 'order_id',
                index => 'line_no',
            },
        },
    },
    order_items => {
        table  => 'badger_test_order_items',
        id     => 'id',
        fields => 'order_id line_no product quantity',
        update => 'line_no',
    },
    # NOTE: no table definition for sessions so that we can test the 
    # dynamic table definition capability - see t/database/tables.t
};


#-----------------------------------------------------------------------
# define the records and the tables they come from
#-----------------------------------------------------------------------

our $RECORDS = {
    user       => 'users',
    address    => 'addresses',
    order      => 'orders',
    order_item => 'order_items',
};
            


#-----------------------------------------------------------------------
# some custom methods
#-----------------------------------------------------------------------


sub drop_test_tables {
    my $self = shift;
    $self->do('drop_users');
    $self->do('drop_addrs');
    $self->do('drop_orders');
    $self->do('drop_items');
    $self->do('drop_sessions');
}


sub create_test_tables {
    my $self = shift;
    $self->do('create_users');
    $self->do('create_addrs');
    $self->do('create_orders');
    $self->do('create_items');
    $self->do('create_sessions');
}


sub insert_test_address {
    my $self = shift;
    
    $self->table('addresses')->insert(
        line1   => '42 Infinity Drive',
        town    => 'Guildford',
        region  => 'Surrey',
        country => 'UK',
    );
}


sub insert_test_user {
    my $self = shift;
    
    $self->table('users')->insert(
        name       => 'Arthur Dent',
        username   => 'dent',
        password   => 'secret',
        @_,
    );
}


sub test_table {
    Badger::Test::Table->new( database => shift );
}

1;
